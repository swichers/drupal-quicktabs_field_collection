<?php
/**
 * @file
 * Renders a field collection as QuickTabs.
 */

/**
 * Implements hook_permission().
 */
function quicktabs_field_collection_permission() {

  return array(
    'administer quicktabs_field_collection' => array(
      'title' => t('Administer QuickTabs Field Collection'),
      'description' => t('Configure advanced aspects of QuickTabs Field Collection'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function quicktabs_field_collection_field_formatter_info() {

  $formatters = array();

  if (module_exists('field_collection')) {

    $formatters['field_collection_quicktabs'] = array(
      'label' => t('QuickTabs'),
      'field types' => array('field_collection'),
      'description' => t('Displays a field collection as a QuickTabs instance'),
      'settings' => array(
        'tab_field' => NULL,
        'content_field' => NULL,
        'content_field_striptags' => FALSE,
        'classes' => NULL,
        // Settings for the QuickTabs module that get passed into its API.
        'qt_hide_empty_tabs' => TRUE,
        'qt_renderer' => 'quicktabs',
        'qt_style' => 'default',
      ),
    );
  }

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function quicktabs_field_collection_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $options = array();

  $field_collections = field_info_instances('field_collection_item', $field['field_name']);
  foreach ($field_collections as $field_name => $field) {

    $options[$field_name] = $field['label'] . ' (' . $field_name . ')';
  }

  $element['tab_field'] = array(
    '#type' => 'select',
    '#title' => t('Label field'),
    '#description' => t('The field collection filed to use for the tab label.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => $settings['tab_field'],
  );

  $element['content_field'] = array(
    '#type' => 'select',
    '#title' => t('Body field'),
    '#description' => t('The field collection filed to use for the tab body.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => $settings['content_field'],
  );

  $element['content_field_striptags'] = array(
    '#type' => 'checkbox',
    '#title' => t('Strip Tags from content field'),
    '#description' => t("Strip all HTML tags from the value used for the tab's content."),
    '#default_value' => $settings['content_field_striptags'],
  );

  $element['classes'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Classes'),
    '#description' => t('Provide a space delimited list of css classes to use.'),
    '#default_value' => $settings['classes'],
  );

  quicktabs_field_collection_get_quicktabs_options($element, $settings);

  return $element;

}

/**
 * Helper function to add QuickTab settings fields to the field settings form.
 *
 * Taken from the QuickTab module and tweaked slightly to work within the field
 * config form. If/when QuickTabs offers an API to pull in renderes and styles
 * this function can be removed and the changes moved back into the normal
 * settings form.
 *
 * @param array $element
 *   The settings form array.
 *
 * @param array $settings
 *   The current settings for the field.
 */
function quicktabs_field_collection_get_quicktabs_options(&$element, $settings) {

  $element['qt'] = array(
    '#markup' => '<b>' . t('QuickTab settings') . '</b>',
  );

  $element['qt_hide_empty_tabs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide empty tabs'),
    '#description' => t('Hide tabs where there is no content available.'),
    '#default_value' => $settings['qt_hide_empty_tabs'],
  );

  ctools_include('plugins');
  $renderers = ctools_get_plugins('quicktabs', 'renderers');
  $renderer_options = array();
  foreach ($renderers as $name => $info) {
    if ($class = ctools_plugin_load_class('quicktabs', 'renderers', $name, 'handler')) {
      // Add the renderer to the dropdown list of renderers
      $renderer_options[$name] = $name;
      // Get the renderer's options form elements

      // PHP 5.2 doesn't support $class::staticMethod() syntax, so we have to
      // use call_user_func_array() until PHP 5.3 is required.
      $renderer_form_options[$name] = call_user_func_array(array($class, 'optionsForm'), array($qt));
    }
  }
  ksort($renderer_options);
  $element['qt_renderer'] = array(
    '#type' => 'select',
    '#title' => t('Renderer'),
    '#description' => t('Choose how to render the content.'),
    '#options' => $renderer_options,
    '#default_value' => $settings['qt_renderer'],
    '#attributes' => array('class' => array('qtfc-renderer-select')),
  );
  // Add the renderer options form elements to the form, to be shown only if the
  // renderer in question is selected.
  $element['options'] = array('#tree' => TRUE);
  foreach ($renderer_form_options as $renderer => $options) {
    foreach ($options as &$option) {
      $option['#states'] = array('visible' => array('select.qtfc-renderer-select' => array('value' => $renderer)));
    }
    $element['options'][$renderer] = $options;
  }

  $styles = module_invoke_all('quicktabs_tabstyles');
  $style_options = array();
  // The keys used for options must be valid html IDs.
  foreach ($styles as $style) {
    $style_options[$style] = $style;
  }
  ksort($style_options);
  $element['qt_style'] = array(
    '#type' => 'select',
    '#title' => t('Style'),
    '#description' => t('Choose the quicktab style.'),
    '#options' => array('nostyle' => t('No style')) + array('default' => t('Default style')) + $style_options,
    '#default_value' => $settings['qt_style'],
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function quicktabs_field_collection_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $summary[] = t('Tab field: @field-name', array('@field-name' => $settings['tab_field']));
  $summary[] = t('Content field: @field-name', array('@field-name' => $settings['content_field']));
  $summary[] = t('Strip tags in content: @yes-no',
                 array('@yes-no' => !empty($settings['content_field_striptags']) ? 'yes' : 'no')
               );
  if (!empty($settings['classes'])) {

    $summary[] = t('Classes: @classes', array('@classes' => $settings['classes']));
  }
  $summary[] = t('Hide empty tabs: @yes-no',
                 array('@yes-no' => !empty($settings['qt_hide_empty_tabs']) ? 'yes' : 'no')
               );
  $summary[] = t('QuickTab renderer: @qt-renderer', array('@qt-renderer' => $settings['qt_renderer']));
  $summary[] = t('QuickTab style: @qt-style', array('@qt-style' => $settings['qt_style']));

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function quicktabs_field_collection_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  $settings = $display['settings'];
  $theme_func = 'field_collection_quicktabs_formatter_' . $display['type'];

  switch ($display['type']) {

    case 'field_collection_quicktabs':
      $new_element = array(
        '#theme' => $theme_func,
        '#settings' => $settings,
      );

      foreach ($items as $delta => $item) {

        // Verify that there is something in the field collection befor trying to render it.
        $entity = entity_load('field_collection_item', array($item['value']));
        if (!empty($entity)) {

          $new_element['#items'][$item['value']] = current($entity);
        }
      }

      if (!empty($new_element['#items'])) {

        $element[] = $new_element;
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function quicktabs_field_collection_theme($existing, $type, $theme, $path) {

  return array(
    'field_collection_quicktabs_formatter_field_collection_quicktabs' => array(
      'variables' => array(
        'items' => NULL,
        'settings' => array(),
      ),
    ),
  );
}

/**
 * A theme function for displaying field collections as QuickTab instances.
 *
 * @param array   $variables
 *   An array of the address and settings
 *
 * @return string
 *   The rendered HTML
 */
function theme_field_collection_quicktabs_formatter_field_collection_quicktabs($variables) {

  $items = $variables['items'];
  $formatter_settings = $variables['settings'];

  if (empty($items)) {

    return NULL;
  }

  $tabs = array();
  $weight = 0;
  foreach ($items as $collection_id => $collection) {

    if (empty($collection)) {

      continue;
    }

    $tabs[] = array_merge(
      _quicktabs_field_collection_get_tab_parts($collection, $formatter_settings),
      array('weight' => $weight++)
    );
  }

  $qt_settings = array(
    'hide_empty_tabs' => !empty($formatter_settings['qt_hide_empty_tabs']),
    // AJAX is unsupported for this field formatter.
    'ajax' => FALSE,
    'renderer' => $formatter_settings['qt_renderer'],
    'style' => $formatter_settings['qt_style'],
    'options' => _quicktab_settings_by_renderer($formatter_settings['qt_renderer']),
  );

  $qt = quicktabs_build_quicktabs('field_collection_quicktabs', $qt_settings, $tabs);

  /*
   * The class is added here instead of to $qt_settings so it wraps the entire
   * QuickTabs output.
   */
  if (!empty($qt['content']) && !empty($formatter_settings['classes'])) {

    $qt['content']['content']['#options']['attributes']['class'] .= ' ' . $formatter_settings['classes'];
  }

  return render($qt);
}

/**
 * Retrieves the tab title and contents from a field collection entity.
 *
 * @param object $collection_entity
 *   The field collection entity to pull values from
 *
 * @return array
 *   An array with title and contents keys
 */
function _quicktabs_field_collection_get_tab_parts($collection_entity, $settings) {

  $label_field_name = $settings['tab_field'];
  $content_field_name = $settings['content_field'];

  // Retrieve the render array for the tab field.
  $label_item = field_get_items(
    'field_collection_item',
    $collection_entity,
    $label_field_name
  );

  $label_value = field_view_value(
    'field_collection_item',
    $collection_entity,
    $label_field_name,
    $label_item[0],
    'full'
  );

  // Retrieve the render array for the content field.
  $content_value = field_view_field(
    'field_collection_item',
    $collection_entity,
    $content_field_name,
    'full'
  );

  // Strip HTML tags from content if necessary.
  $content = ($settings['content_field_striptags']) ?
    strip_tags(render($content_value)) : render($content_value);

  return array(
    'title' => decode_entities(render($label_value)),
    'contents' => array('#markup' => $content),
  );
}

/**
 * Helper function to pull renderer settings for QuickTab renderers.
 *
 * @param string $renderer_name
 *   The name of the QuickTab renderer to retrieve settings for.
 *
 * @return array
 *   An array of settings.
 */
function _quicktab_settings_by_renderer($renderer_name) {

  $renderer_settings = array();

  $renderer_settings['accordion'] = array(
    'history' => FALSE,
    'jquery_ui' => array(
      'autoHeight' => FALSE,
      'collapsible' => FALSE,
    ),
  );

  $renderer_settings['ui_tabs'] = array(
    'history' => FALSE,
  );

  $renderer_settings['quicktabs'] = array();

  return empty($renderer_settings[$renderer_name]) ? array() : $renderer_settings[$renderer_name];
}
